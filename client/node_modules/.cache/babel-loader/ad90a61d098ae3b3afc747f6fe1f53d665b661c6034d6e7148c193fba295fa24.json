{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import{composeWithDevTools}from'redux-devtools-extension';import thunk from'redux-thunk';import rootReducer from'./reducers';import setAuthToken from'./utils/setAuthToken';var initialState={};var middleware=[thunk];var store=createStore(rootReducer,initialState,composeWithDevTools(applyMiddleware.apply(void 0,middleware)));/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */ /*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */var currentState=store.getState();store.subscribe(function(){// keep track of the previous and current state to compare changes\nvar previousState=currentState;currentState=store.getState();// if the token changes set the value in localStorage and axios headers\nif(previousState.auth.token!==currentState.auth.token){var token=currentState.auth.token;setAuthToken(token);}});export default store;","map":{"version":3,"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","apply","currentState","getState","subscribe","previousState","auth","token"],"sources":["D:/Documents/Semester 7/New folder/JOB-HIVE-main/JOB-HIVE-main/client/src/store.js"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n/*\n  NOTE: set up a store subscription listener\n  to store the users token in localStorage\n */\n\n/*\n  initialize current state from redux store for subscription comparison\n  preventing undefined error\n */\nlet currentState = store.getState();\n\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState();\n  // if the token changes set the value in localStorage and axios headers\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    setAuthToken(token);\n  }\n});\n\nexport default store;\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,eAAe,KAAQ,OAAO,CACpD,OAASC,mBAAmB,KAAQ,0BAA0B,CAC9D,MAAO,CAAAC,KAAK,KAAM,aAAa,CAC/B,MAAO,CAAAC,WAAW,KAAM,YAAY,CACpC,MAAO,CAAAC,YAAY,KAAM,sBAAsB,CAE/C,GAAM,CAAAC,YAAY,CAAG,CAAC,CAAC,CAEvB,GAAM,CAAAC,UAAU,CAAG,CAACJ,KAAK,CAAC,CAE1B,GAAM,CAAAK,KAAK,CAAGR,WAAW,CACvBI,WAAW,CACXE,YAAY,CACZJ,mBAAmB,CAACD,eAAe,CAAAQ,KAAA,QAAIF,UAAU,CAAC,CAAC,CACpD,CAED;AACA;AACA;AACA,GAHA,CAKA;AACA;AACA;AACA,GACA,GAAI,CAAAG,YAAY,CAAGF,KAAK,CAACG,QAAQ,EAAE,CAEnCH,KAAK,CAACI,SAAS,CAAC,UAAM,CACpB;AACA,GAAI,CAAAC,aAAa,CAAGH,YAAY,CAChCA,YAAY,CAAGF,KAAK,CAACG,QAAQ,EAAE,CAC/B;AACA,GAAIE,aAAa,CAACC,IAAI,CAACC,KAAK,GAAKL,YAAY,CAACI,IAAI,CAACC,KAAK,CAAE,CACxD,GAAM,CAAAA,KAAK,CAAGL,YAAY,CAACI,IAAI,CAACC,KAAK,CACrCV,YAAY,CAACU,KAAK,CAAC,CACrB,CACF,CAAC,CAAC,CAEF,cAAe,CAAAP,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}